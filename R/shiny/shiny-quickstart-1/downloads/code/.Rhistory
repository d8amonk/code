install.packages("sparklyr")
install.packages("sparklyr")
library(sparklyr)
spark_install(version = )
spark_install(version = '1.6.2')
sc <- spark_connect(master = 'local')
require(sparklyr)
sc <- spark_connect(master = 'local')
require(sparklyr)
sc <- spark_connect(master = 'local')
require(sparklyr)
sc <- spark_connect(master = 'local')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111\\bin')
sc <- spark_connect(master = 'local')
getwd()
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_112\\jre')
require(sparklyr)
sc <- spark_connect(master = 'local')
library(dplyr)
iris_tbl <- copy_to(sc, iris, "iris", overwrite = T)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights", overwrite = T)
install.packages("nycflights13")
install.packages("Lahman")
flights_tbl <- copy_to(sc, nycflights13::flights, "flights", overwrite = T)
batting_tbl <- copy_to(sc, Lahman::Batting, "batting", overwrite = T)
car_tbl <- copy_to(sc, mtcars, "cars", overwrite = T)
src_tbls(sc)
flights_tbl %>% filter(dep_delay > 2)
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect()
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect()
library(ggplot2)
install.packages("ggplot2")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Poop', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
shinyApp(ui = ui, server = server)
setwd("C:/Users/Jeffrey/Google Drive/Code/R/shiny/shiny-quickstart-1/downloads/code")
rm(list = ls())
fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
library(shiny)
fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
fluidPage(
"Hello World!"
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
fluidPage(
"Hello World!",
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
ui <- fluidPage(
"Hello World!",
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
"Hello World!",
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num",
label = "Choose a number",
value = 500, min = 1, max = 1000)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
"Hello World!",
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num",
label = "Friggof you!",
value = 500, min = 1, max = 1000)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
"Friggof you!!",
# *Input() functions,
# *Output() functions
sliderInput(inputId = "num",
label = "Choose a number!",
value = 500, min = 1, max = 1000)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
